name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Fast preliminary checks that can fail early
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Generate cache key
        id: cache-key
        run: echo "key=uv-v2-${{ runner.os }}-${{ hashFiles('uv.lock') }}" >> $GITHUB_OUTPUT

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv run python -c "import black; print('Black installed successfully')"

      - name: Code formatting check (Black)
        run: uv run black --check --diff .

      - name: Import sorting check (isort)
        run: uv run isort --check-only --diff .

      - name: Type checking (mypy)
        run: uv run mypy src/

  # Comprehensive test matrix across Python versions and OS
  test-matrix:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ needs.quick-checks.outputs.cache-key }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ needs.quick-checks.outputs.cache-key }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests with coverage
        run: |
          uv run pytest \
            --cov=src/reasoning_library \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            --junit-xml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            coverage.xml
          retention-days: 7

  # Integration and performance tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ needs.quick-checks.outputs.cache-key }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          if uv run pytest tests/ -m "not unit" -v --tb=short; then
            echo "✅ Integration tests passed"
          else
            echo "❌ Integration tests failed"
            echo "Integration test failures are critical and must be investigated"
            exit 1
          fi

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          if uv run python -m pytest tests/ -k "benchmark" --benchmark-only; then
            echo "✅ Performance benchmarks completed"
          else
            echo "⚠️ Performance benchmarks failed or no benchmark tests found"
            echo "This is informational only and does not block the build"
          fi

  # Package build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ needs.quick-checks.outputs.cache-key }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --dev

      - name: Build wheel and sdist
        run: uv build

      - name: Verify build contents
        run: |
          ls -la dist/
          uv run python -c "
          import tarfile
          import zipfile
          import os

          # Check sdist contents
          for f in os.listdir('dist'):
              if f.endswith('.tar.gz'):
                  with tarfile.open(f'dist/{f}', 'r:gz') as tar:
                      print(f'=== {f} contents ===')
                      tar.list()
              elif f.endswith('.whl'):
                  with zipfile.ZipFile(f'dist/{f}', 'r') as zip:
                      print(f'=== {f} contents ===')
                      print('\n'.join(zip.namelist()))
          "

      - name: Install and test built package
        run: |
          # Install from wheel in a clean environment
          uv venv test-env
          source test-env/bin/activate
          uv pip install dist/*.whl
          python -c "import reasoning_library; print('Package imports successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  # Quality gate summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quick-checks, test-matrix, integration-tests, build-verification]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Check all jobs status
        run: |
          echo "Quick checks: ${{ needs.quick-checks.result }}"
          echo "Test matrix: ${{ needs.test-matrix.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Build verification: ${{ needs.build-verification.result }}"

          # Fail if any critical jobs failed
          if [[ "${{ needs.quick-checks.result }}" != "success" ]]; then
            echo "❌ Quick checks failed"
            exit 1
          fi

          if [[ "${{ needs.test-matrix.result }}" != "success" ]]; then
            echo "❌ Test matrix failed"
            exit 1
          fi

          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi

          if [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi

          echo "✅ All quality gates passed!"

      - name: Quality summary
        run: |
          echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code formatting (Black)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Import sorting (isort)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Type checking (mypy)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Test coverage ≥85%" >> $GITHUB_STEP_SUMMARY
          echo "✅ Multi-platform compatibility" >> $GITHUB_STEP_SUMMARY
          echo "✅ Package build verification" >> $GITHUB_STEP_SUMMARY